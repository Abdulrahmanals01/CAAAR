// Add these helper functions to your BookingHistory component

const handleCompleteBooking = async (bookingId) => {
  try {
    setLoading(true);
    const response = await completeBooking(bookingId);
    
    if (response.success) {
      // Update the booking in state
      setBookings(bookings.map(booking => 
        booking.id === bookingId 
          ? { ...booking, status: 'completed' } 
          : booking
      ));
      
      // Check if the user can now rate this booking
      await checkEligibility(bookingId);
      
      setError('');
    } else {
      setError(response.error || 'Failed to complete booking');
    }
  } catch (err) {
    setError('An error occurred while completing the booking');
    console.error(err);
  } finally {
    setLoading(false);
  }
};

const handleStartTrip = async (bookingId) => {
  try {
    setLoading(true);
    const response = await startTrip(bookingId);
    
    if (response.success) {
      // Update the booking in state
      setBookings(bookings.map(booking => 
        booking.id === bookingId 
          ? { ...booking, trip_started: true } 
          : booking
      ));
      
      setError('');
    } else {
      setError(response.error || 'Failed to start trip');
    }
  } catch (err) {
    setError('An error occurred while starting the trip');
    console.error(err);
  } finally {
    setLoading(false);
  }
};

const handleEndTripEarly = async (bookingId) => {
  try {
    setLoading(true);
    const response = await endTripEarly(bookingId);
    
    if (response.success) {
      // Update the booking in state
      setBookings(bookings.map(booking => 
        booking.id === bookingId 
          ? { ...booking, status: 'completed', trip_ended: true } 
          : booking
      ));
      
      // Check if the user can now rate this booking
      await checkEligibility(bookingId);
      
      setError('');
    } else {
      setError(response.error || 'Failed to end trip early');
    }
  } catch (err) {
    setError('An error occurred while ending the trip early');
    console.error(err);
  } finally {
    setLoading(false);
  }
};

const [selectedBooking, setSelectedBooking] = useState(null);
const [showPhotoUpload, setShowPhotoUpload] = useState(false);
const [photoType, setPhotoType] = useState('before');
const [photos, setPhotos] = useState([]);

const handlePhotoUpload = (bookingId, type) => {
  setSelectedBooking(bookingId);
  setPhotoType(type);
  setShowPhotoUpload(true);
  setPhotos([]);
};

const handlePhotoChange = (e) => {
  if (e.target.files) {
    setPhotos(Array.from(e.target.files));
  }
};

const submitPhotos = async () => {
  if (!selectedBooking || photos.length === 0) return;
  
  try {
    setLoading(true);
    const response = await uploadInspectionPhotos(selectedBooking, photoType, photos);
    
    if (response.success) {
      setShowPhotoUpload(false);
      setSelectedBooking(null);
      setPhotos([]);
      setError('');
    } else {
      setError(response.error || `Failed to upload ${photoType} photos`);
    }
  } catch (err) {
    setError(`An error occurred while uploading ${photoType} photos`);
    console.error(err);
  } finally {
    setLoading(false);
  }
};

// And add this JSX for the photo upload modal
{showPhotoUpload && (
  <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex items-center justify-center">
    <div className="bg-white rounded-lg p-8 max-w-md w-full">
      <h3 className="text-xl font-semibold mb-4">
        Upload {photoType === 'before' ? 'Pre-Trip' : 'Post-Trip'} Photos
      </h3>
      <p className="mb-4 text-gray-600">
        Please upload photos of the car {photoType === 'before' ? 'before starting' : 'after ending'} the trip for insurance purposes.
      </p>
      
      <input
        type="file"
        multiple
        accept="image/*"
        onChange={handlePhotoChange}
        className="mb-4 block w-full text-sm text-gray-500
          file:mr-4 file:py-2 file:px-4
          file:rounded-full file:border-0
          file:text-sm file:font-semibold
          file:bg-blue-50 file:text-blue-700
          hover:file:bg-blue-100"
      />
      
      {photos.length > 0 && (
        <div className="mb-4">
          <p>{photos.length} photo(s) selected</p>
        </div>
      )}
      
      <div className="flex justify-end space-x-2">
        <button
          onClick={() => setShowPhotoUpload(false)}
          className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
        >
          Cancel
        </button>
        <button
          onClick={submitPhotos}
          disabled={photos.length === 0 || loading}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? 'Uploading...' : 'Upload Photos'}
        </button>
      </div>
    </div>
  </div>
)}
