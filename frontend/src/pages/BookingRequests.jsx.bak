import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { updateBookingStatus } from '../api/bookings';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

const BookingRequests = () => {
  const [bookings, setBookings] = useState([]);
  const [activeTab, setActiveTab] = useState('pending');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [actionError, setActionError] = useState(null);

  const fetchBookings = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      if (!token) {
        setError('Authentication required. Please log in.');
        setLoading(false);
        return;
      }
      
      const response = await axios.get(`${API_URL}/api/bookings/user`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      setBookings(response.data);
      setError(null);
    } catch (err) {
      console.error('Error fetching bookings:', err);
      setError('Failed to load bookings. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchBookings();
  }, []);

  const handleAcceptBooking = async (bookingId) => {
    setActionError(null);
    try {
      const result = await updateBookingStatus(bookingId, 'accepted');
      
      if (result.success) {
        // Refresh all bookings to get the latest status
        await fetchBookings();
      } else {
        setActionError(result.error || 'Error accepting booking. Please try again.');
      }
    } catch (err) {
      console.error('Error accepting booking:', err);
      setActionError('Failed to accept booking. Please try again.');
    }
  };

  const handleRejectBooking = async (bookingId) => {
    setActionError(null);
    try {
      const result = await updateBookingStatus(bookingId, 'rejected');
      
      if (result.success) {
        // Refresh all bookings to get the latest status
        await fetchBookings();
      } else {
        setActionError(result.error || 'Error rejecting booking. Please try again.');
      }
    } catch (err) {
      console.error('Error rejecting booking:', err);
      setActionError('Failed to reject booking. Please try again.');
    }
  };

  // Filter bookings based on active tab
  const pendingBookings = bookings.filter(booking => booking.status === 'pending');
  const currentBookings = bookings.filter(booking => booking.status === 'accepted');
  const pastBookings = bookings.filter(booking => 
    ['rejected', 'canceled', 'completed'].includes(booking.status)
  );

  // Determine which bookings to display based on the active tab
  const displayedBookings = 
    activeTab === 'pending' ? pendingBookings :
    activeTab === 'current' ? currentBookings : pastBookings;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Booking Requests</h1>

      {(error || actionError) && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
          <p>{error || actionError}</p>
        </div>
      )}

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex -mb-px">
          <button
            onClick={() => setActiveTab('pending')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'pending'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Pending <span className="ml-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">{pendingBookings.length}</span>
          </button>
          <button
            onClick={() => setActiveTab('current')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'current'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Current Trips <span className="ml-2 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">{currentBookings.length}</span>
          </button>
          <button
            onClick={() => setActiveTab('past')}
            className={`py-4 px-1 ${
              activeTab === 'past'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Past Trips <span className="ml-2 bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs">{pastBookings.length}</span>
          </button>
        </nav>
      </div>

      {loading ? (
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      ) : displayedBookings.length > 0 ? (
        <div className="space-y-6">
          {displayedBookings.map(booking => (
            <div key={booking.id} className="bg-white shadow-md rounded-lg overflow-hidden">
              <div className="md:flex">
                <div className="md:flex-shrink-0">
                  <img
                    className="h-48 w-full object-cover md:w-48"
                    src={booking.image ? `${API_URL}${booking.image}` : '/car-placeholder.png'}
                    alt={`${booking.brand || ''} ${booking.model || ''}`}
                    onError={(e) => {
                      e.target.onerror = null;
                      e.target.src = '/car-placeholder.png';
                    }}
                  />
                </div>
                <div className="p-6 w-full">
                  <div className="flex justify-between items-start">
                    <div>
                      <h2 className="text-xl font-semibold">{booking.brand || ''} {booking.model || ''} ({booking.year || ''})</h2>
                      <p className="text-gray-600">Renter: {booking.renter_name || 'Unknown'}</p>
                    </div>
                    <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        booking.status === 'accepted' ? 'bg-green-100 text-green-800' :
                        booking.status === 'rejected' ? 'bg-red-100 text-red-800' :
                        booking.status === 'canceled' ? 'bg-gray-100 text-gray-800' :
                        'bg-blue-100 text-blue-800'}`}
                    >
                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                    </span>
                  </div>

                  <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Dates</h3>
                      <p>{new Date(booking.start_date).toLocaleDateString()} - {new Date(booking.end_date).toLocaleDateString()}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Duration</h3>
                      <p>{Math.ceil((new Date(booking.end_date) - new Date(booking.start_date)) / (1000 * 60 * 60 * 24)) + 1} days</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Total Price</h3>
                      <p className="font-semibold">${booking.total_price} SAR</p>
                    </div>
                  </div>

                  {booking.rejection_reason && (
                    <div className="mt-4 text-red-600">
                      <p><strong>Reason for rejection:</strong> {booking.rejection_reason}</p>
                    </div>
                  )}

                  {booking.status === 'pending' && (
                    <div className="mt-6 flex space-x-3">
                      <button
                        onClick={() => handleAcceptBooking(booking.id)}
                        className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
                      >
                        Accept
                      </button>
                      <button
                        onClick={() => handleRejectBooking(booking.id)}
                        className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
                      >
                        Reject
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">No bookings to display</h2>
          {activeTab === 'pending' && <p>When someone wants to rent your car, their request will appear here.</p>}
          {activeTab === 'current' && <p>Your accepted bookings will appear here.</p>}
          {activeTab === 'past' && <p>Your past, completed or rejected bookings will appear here.</p>}
        </div>
      )}
    </div>
  );
};

export default BookingRequests;
