import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getCarById } from '../api/cars';
import BookingForm from '../components/bookings/BookingForm';

const CarDetails = () => {
  const { id } = useParams();
  const [car, setCar] = useState(null);
  const [loading, setLoading] = useState(true);
  const \[error, setError\] = useState\(''\);
  const [isOwner, setIsOwner] = useState(false);
  
  const userRole = localStorage.getItem\('userRole'\);
  const userId = parseInt(localStorage.getItem('userId')) || 0;
  const isHost = userRole === 'host';

  useEffect(() => {
    const fetchCarDetails = async () => {
      try {
        const response = await getCarById(id);
        if (response.success) {
                    setCar(response.data);
          // Check if the current user is the owner of this car
          setIsOwner(response.data.user_id === userId);
        } else {
          setError(response.error);
        }
      } catch (err) {
        setError('Failed to load car details');
      } finally {
        setLoading(false);
      }
    };

    fetchCarDetails();
  }, [id, userId]);

  if (loading) {
    return (
      <div className="container mx-auto p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
          {error}
        </div>
      </div>
    );
  }

  if (!car) {
    return (
      <div className="container mx-auto p-6">
        <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
          Car not found
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Car Details</h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="md:col-span-2">
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            {car.image_url ? (
              <img
                src={car.image_url}
                alt={`${car.brand} ${car.model}`}
                className="w-full h-96 object-cover"
              />
            ) : (
              <div className="w-full h-96 bg-gray-200 flex items-center justify-center">
                <p className="text-gray-500">No image available</p>
              </div>
            )}

            <div className="p-6">
              <h2 className="text-2xl font-bold mb-2">
                {car.brand} {car.model} ({car.year})
              </h2>
              <p className="text-gray-600 mb-4">{car.location}</p>

              <div className="text-2xl font-bold text-green-600 mb-6">
                ${car.price_per_day}/day
              </div>

              <div className="grid grid-cols-2 gap-4 mb-6">
                <div>
                  <h3 className="text-gray-500">Color</h3>
                  <p className="font-medium">{car.color}</p>
                </div>
                <div>
                  <h3 className="text-gray-500">Mileage</h3>
                  <p className="font-medium">{car.mileage} km</p>
                </div>
                <div>
                  <h3 className="text-gray-500">Available From</h3>
                  <p className="font-medium">{new Date(car.availability_start).toLocaleDateString()}</p>
                </div>
                <div>
                  <h3 className="text-gray-500">Available Until</h3>
                  <p className="font-medium">{new Date(car.availability_end).toLocaleDateString()}</p>
                </div>
              </div>

              {car.description && (
                <div className="mb-6">
                  <h3 className="text-lg font-semibold mb-2">Description</h3>
                  <p className="text-gray-700">{car.description}</p>
                </div>
              )}

              <div className="border-t border-gray-200 pt-4">
                <h3 className="text-lg font-semibold mb-2">Host Information</h3>
                <p className="text-gray-700">Listed by: {car.host_name}</p>
                {isOwner && (
                  <div className="mt-2 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded">
                    <p>This is your own car listing. You cannot book your own car.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <div>
          {isOwner ? (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">Your Car Listing</h2>
              <p className="text-gray-600 mb-4">
                This is your own car listing. You cannot book your own car, even when in renter mode.
              </p>
              <p className="text-gray-600">
                You can manage this listing from your host dashboard.
              </p>
            </div>
          ) : (
            <BookingForm car={car} isHost={isHost} />
          )}
        </div>
      </div>
    </div>
  );
};

export default CarDetails;

