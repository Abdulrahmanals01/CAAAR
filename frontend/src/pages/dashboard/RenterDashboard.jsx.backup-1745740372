import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import useAuth from '../../hooks/useAuth';

const RenterDashboard = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('pending');
  const { user } = useAuth();

  useEffect(() => {
    fetchBookings();
  }, [user]);

  const fetchBookings = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');

      if (!token) {
        setError('You must be logged in');
        setLoading(false);
        return;
      }

      const config = {
        headers: { Authorization: `Bearer ${token}` }
      };

      const response = await axios.get('http://localhost:5000/api/bookings/user', config);
      // Filter to show only bookings where the user is the renter
      const renterBookings = response.data.filter(booking => booking.renter_id === user.id);
      setBookings(renterBookings);
      setLoading(false);
    } catch (err) {
      setError('Failed to load bookings');
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    fetchBookings();
  };

  // Filter bookings by status
  const pendingBookings = bookings.filter(booking => booking.status === 'pending');
  const currentBookings = bookings.filter(booking => booking.status === 'accepted');
  const pastBookings = bookings.filter(booking => 
    ['rejected', 'canceled', 'completed'].includes(booking.status)
  );

  // Get displayed bookings based on active tab
  const displayedBookings = 
    activeTab === 'pending' ? pendingBookings :
    activeTab === 'current' ? currentBookings : pastBookings;

  // Calculate counts for tabs
  const counts = {
    pending: pendingBookings.length,
    current: currentBookings.length,
    past: pastBookings.length
  };

  if (loading) return <div className="text-center p-10">Loading...</div>;
  if (error) return <div className="text-red-500 text-center p-10">{error}</div>;

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8">Your Bookings</h1>

      <div className="mb-8">
        <Link to="/cars" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          Find Cars to Book
        </Link>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex -mb-px">
          <button
            onClick={() => setActiveTab('pending')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'pending'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Pending <span className="ml-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">{counts.pending}</span>
          </button>
          <button
            onClick={() => setActiveTab('current')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'current'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Current Trips <span className="ml-2 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">{counts.current}</span>
          </button>
          <button
            onClick={() => setActiveTab('past')}
            className={`py-4 px-1 ${
              activeTab === 'past'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Past Trips <span className="ml-2 bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs">{counts.past}</span>
          </button>
        </nav>
      </div>

      {/* Refresh button */}
      <div className="mb-4">
        <button
          onClick={handleRefresh}
          className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clipRule="evenodd" />
          </svg>
          Refresh Bookings
        </button>
      </div>

      {/* Bookings Display */}
      {displayedBookings.length === 0 ? (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">No bookings to display</h2>
          {activeTab === 'pending' && <p>You don't have any pending bookings at the moment.</p>}
          {activeTab === 'current' && <p>You don't have any active bookings at the moment.</p>}
          {activeTab === 'past' && <p>You don't have any past bookings yet.</p>}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {displayedBookings.map(booking => (
            <div key={booking.id} className="bg-white border rounded-lg p-4 shadow-sm">
              <h3 className="font-bold text-lg mb-2">{booking.brand} {booking.model} ({booking.year})</h3>
              <div className="space-y-1 text-sm text-gray-600">
                <p><span className="font-semibold">From:</span> {new Date(booking.start_date).toLocaleDateString()}</p>
                <p><span className="font-semibold">To:</span> {new Date(booking.end_date).toLocaleDateString()}</p>
                <p>
                  <span className="font-semibold">Status:</span>
                  <span className={
                    booking.status === 'accepted' ? 'text-green-500 ml-2' :
                    booking.status === 'pending' ? 'text-yellow-500 ml-2' :
                    booking.status === 'rejected' ? 'text-red-500 ml-2' :
                    booking.status === 'canceled' ? 'text-gray-500 ml-2' :
                    booking.status === 'completed' ? 'text-blue-500 ml-2' :
                    'text-gray-500 ml-2'
                  }>
                    {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                  </span>
                </p>
                <p className="text-green-600 font-bold mt-2">Total: ${booking.total_price}</p>
              </div>

              {booking.status === 'completed' && (
                <Link to={`/review/${booking.id}`} className="block mt-4 text-center bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                  Leave a Review
                </Link>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default RenterDashboard;
