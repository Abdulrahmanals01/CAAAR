import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import useAuth from '../../hooks/useAuth';

const HostDashboard = () => {
  const [activeTab, setActiveTab] = useState('current');
  const [currentListings, setCurrentListings] = useState([]);
  const [bookingRequests, setBookingRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { user } = useAuth();

  useEffect(() => {
    fetchHostData();
  }, [user]);

  const fetchHostData = async () => {
    try {
      setLoading(true);
      setError('');
      const token = localStorage.getItem('token');

      if (!token || !user) {
        setError('Authentication required');
        setLoading(false);
        return;
      }

      const config = {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      };

      // Get all cars
      const carsResponse = await axios.get('http://localhost:5000/api/cars', config);
      const userCars = carsResponse.data.filter(car => car.user_id === user.id);
      setCurrentListings(userCars);

      // Get bookings - backend already filters for host bookings
      const bookingsResponse = await axios.get('http://localhost:5000/api/bookings/user', config);
      console.log('Received bookings:', bookingsResponse.data);
      
      // For hosts, backend returns all bookings where their car is involved
      // No need to filter further since backend handles it
      setBookingRequests(bookingsResponse.data);

      setLoading(false);
    } catch (err) {
      console.error('Error in dashboard:', err);
      setError('Failed to load dashboard data. Please try again later.');
      setLoading(false);
    }
  };

  // Rest of the component remains the same...

  // Make sure you update the rest of the component to be consistent with these changes
  // The host dashboard should show bookings where the car belongs to the host
  
  // Filter bookings by status
  const pendingRequests = bookingRequests.filter(booking => booking.status === 'pending');
  const currentTrips = bookingRequests.filter(booking => booking.status === 'accepted');
  const pastTrips = bookingRequests.filter(booking =>
    ['rejected', 'canceled', 'completed'].includes(booking.status)
  );

  // Get displayed bookings based on active tab
  const displayedRequests =
    activeTab === 'current' ? currentTrips :
    activeTab === 'pending' ? pendingRequests :
    pastTrips;

  const counts = {
    current: currentTrips.length,
    pending: pendingRequests.length,
    past: pastTrips.length
  };

  const handleDeleteCar = async (carId) => {
    if (!window.confirm('Are you sure you want to delete this listing?')) {
      return;
    }

    try {
      const token = localStorage.getItem('token');
      await axios.delete(`http://localhost:5000/api/cars/${carId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      setCurrentListings(currentListings.filter(car => car.id !== carId));
      alert('Car listing deleted successfully');
    } catch (err) {
      console.error('Error deleting car:', err);
      alert('Failed to delete car listing: ' + (err.response?.data?.message || err.message));
    }
  };

  if (loading) return <div className="text-center p-10">Loading...</div>;

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8">Booking Requests</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
          <p>{error}</p>
        </div>
      )}

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex -mb-px">
          <button
            onClick={() => setActiveTab('current')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'current'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Current Trips <span className="ml-2 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">{counts.current}</span>
          </button>
          <button
            onClick={() => setActiveTab('pending')}
            className={`mr-8 py-4 px-1 ${
              activeTab === 'pending'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Pending <span className="ml-2 bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs">{counts.pending}</span>
          </button>
          <button
            onClick={() => setActiveTab('past')}
            className={`py-4 px-1 ${
              activeTab === 'past'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Past Trips <span className="ml-2 bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs">{counts.past}</span>  
          </button>
        </nav>
      </div>

      {/* Bookings Display */}
      {displayedRequests.length === 0 ? (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">No bookings to display</h2>
          {activeTab === 'pending' && <p>When someone wants to rent your car, their request will appear here.</p>}
          {activeTab === 'current' && <p>Your accepted bookings will appear here.</p>}
          {activeTab === 'past' && <p>Your past, completed or rejected bookings will appear here.</p>}
        </div>
      ) : (
        <div className="space-y-6">
          {displayedRequests.map(booking => (
            <div key={booking.id} className="bg-white shadow-md rounded-lg overflow-hidden">
              <div className="md:flex">
                <div className="md:flex-shrink-0">
                  {booking.image ? (
                    <img
                      className="h-48 w-full object-cover md:w-48"
                      src={booking.image}
                      alt={`${booking.brand} ${booking.model}`}
                    />
                  ) : (
                    <div className="h-48 w-full md:w-48 bg-gray-200 flex items-center justify-center">
                      <p className="text-gray-500">No image available</p>
                    </div>
                  )}
                </div>
                <div className="p-6 w-full">
                  <div className="flex justify-between items-start">
                    <div>
                      <h2 className="text-xl font-semibold">{booking.brand} {booking.model} ({booking.year})</h2>
                      <p className="text-gray-600">{new Date(booking.start_date).toLocaleDateString()} to {new Date(booking.end_date).toLocaleDateString()}</p>
                    </div>
                    <span className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full
                      ${booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        booking.status === 'accepted' ? 'bg-green-100 text-green-800' :
                        booking.status === 'rejected' ? 'bg-red-100 text-red-800' :
                        booking.status === 'canceled' ? 'bg-gray-100 text-gray-800' :
                        'bg-blue-100 text-blue-800'}`}
                    >
                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                    </span>
                  </div>

                  <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Total Price</h3>
                      <p className="font-semibold">${booking.total_price}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-gray-500">Renter</h3>
                      <p className="text-blue-600">{booking.renter_name}</p>
                    </div>
                  </div>

                  <div className="mt-6">
                    <Link
                      to={`/cars/${booking.car_id}`}
                      className="inline-block bg-blue-100 text-blue-700 px-4 py-2 rounded hover:bg-blue-200"
                    >
                      View Car Details
                    </Link>
                    {booking.status === 'pending' && (
                      <Link
                        to="/booking-requests"
                        className="inline-block bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 ml-4"
                      >
                        Manage Request
                      </Link>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Car Listings Section - remains the same */}
      <h2 className="text-2xl font-bold mb-6 mt-12">Your Car Listings</h2>

      {currentListings.length === 0 ? (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">No car listings yet</h2>
          <p className="text-gray-600 mb-4">You don't have any car listings.</p>
          <Link
            to="/list-car"
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 inline-block"
          >
            List Your First Car
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {currentListings.map((car) => (
            <div key={car.id} className="bg-white border rounded-lg shadow-sm overflow-hidden">
              {car.image_url ? (
                <img
                  src={car.image_url}
                  alt={`${car.brand || car.make} ${car.model}`}
                  className="w-full h-48 object-cover"
                />
              ) : (
                <div className="w-full h-48 bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-500">No image</span>
                </div>
              )}

              <div className="p-4">
                <h3 className="font-bold text-lg">
                  {car.brand || car.make} {car.model} ({car.year})
                </h3>
                <p className="text-gray-600 mb-2">{car.location}</p>
                <p className="text-green-600 font-bold">
                  ${car.price_per_day}/day
                </p>

                <div className="mt-4">
                  <span className="px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                    Active
                  </span>
                </div>

                <div className="mt-3 grid grid-cols-2 gap-2">
                  <Link
                    to={`/cars/${car.id}`}
                    className="bg-blue-500 text-center text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
                  >
                    View Details
                  </Link>
                  <button
                    onClick={() => handleDeleteCar(car.id)}
                    className="bg-red-500 text-center text-white px-3 py-1 rounded text-sm hover:bg-red-600"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default HostDashboard;
