import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import useAuth from '../../hooks/useAuth';

const HostDashboard = () => {
  const [activeTab, setActiveTab] = useState('pending');
  const [currentListings, setCurrentListings] = useState([]);
  const [bookingRequests, setBookingRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [statistics, setStatistics] = useState({
    totalEarnings: 0,
    activeBookings: 0,
    completedBookings: 0,
    totalBookings: 0,
    averageRating: 0
  });

  const { user } = useAuth();

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      // Fetch car listings
      const carsResponse = await axios.get('/api/cars/owner');
      
      // Make sure we have a valid array of cars
      let cars = [];
      if (Array.isArray(carsResponse.data)) {
        cars = carsResponse.data;
      } else if (carsResponse.data && typeof carsResponse.data === 'object') {
        // Try to find cars array in the response object
        if (Array.isArray(carsResponse.data.cars)) {
          cars = carsResponse.data.cars;
        } else {
          console.warn('Unexpected API response format for cars:', carsResponse.data);
        }
      }
      
      setCurrentListings(cars);

      // Fetch booking requests if applicable
      try {
        const bookingsResponse = await axios.get('/api/bookings/user');
        const bookings = Array.isArray(bookingsResponse.data) ? bookingsResponse.data : [];
        
        // Filter for pending bookings where the user is the host
        const pendingRequests = bookings.filter(booking => 
          booking.status === 'pending' && booking.host_id === user?.id
        );
        
        setBookingRequests(pendingRequests);
        
        // Calculate statistics
        calculateStatistics(bookings);
      } catch (bookingErr) {
        console.error('Error fetching bookings:', bookingErr);
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const calculateStatistics = (bookings) => {
    if (!Array.isArray(bookings)) {
      console.warn('Bookings is not an array:', bookings);
      return;
    }
    
    // Total bookings
    const totalBookings = bookings.length;
    
    // Active bookings (status === 'accepted')
    const activeBookings = bookings.filter(booking => booking.status === 'accepted').length;
    
    // Completed bookings
    const completedBookings = bookings.filter(booking => booking.status === 'completed').length;
    
    // Total earnings (sum of completed bookings' total_price)
    const totalEarnings = bookings
      .filter(booking => booking.status === 'completed')
      .reduce((sum, booking) => sum + parseFloat(booking.total_price || 0), 0);
    
    // You might need to fetch ratings separately to calculate average
    // For now, we'll just set a placeholder
    
    setStatistics({
      totalEarnings,
      activeBookings,
      completedBookings,
      totalBookings,
      averageRating: 0 // Placeholder until you implement ratings
    });
  };

  const handleDeleteCar = async (carId) => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`/api/cars/${carId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      // Only filter if currentListings is an array
      if (Array.isArray(currentListings)) {
        setCurrentListings(currentListings.filter(car => car.id !== carId));
      } else {
        // If not array, refresh data
        fetchData();
      }
      
      alert('Car listing deleted successfully');
    } catch (err) {
      console.error('Error deleting car:', err);
      alert('Failed to delete car listing: ' + (err.response?.data?.message || err.message));
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">Host Dashboard</h1>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Host Dashboard</h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
          {error}
        </div>
      )}

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
          <h3 className="text-gray-500 text-sm uppercase font-semibold">Total Earnings</h3>
          <p className="text-3xl font-bold">${statistics.totalEarnings.toFixed(2)}</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
          <h3 className="text-gray-500 text-sm uppercase font-semibold">Active Bookings</h3>
          <p className="text-3xl font-bold">{statistics.activeBookings}</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
          <h3 className="text-gray-500 text-sm uppercase font-semibold">Completed Bookings</h3>
          <p className="text-3xl font-bold">{statistics.completedBookings}</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
          <h3 className="text-gray-500 text-sm uppercase font-semibold">Average Rating</h3>
          <p className="text-3xl font-bold">{statistics.averageRating || 'N/A'}</p>
        </div>
      </div>

      {/* Booking Requests Section */}
      <h2 className="text-2xl font-bold mb-6">Booking Requests</h2>
      
      {/* Tabs for booking status */}
      <div className="mb-6 border-b border-gray-200">
        <nav className="-mb-px flex">
          <button
            onClick={() => setActiveTab('pending')}
            className={`py-4 px-6 font-medium text-sm ${
              activeTab === 'pending'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Pending Requests 
            {bookingRequests.length > 0 && (
              <span className="ml-2 bg-yellow-100 text-yellow-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">
                {bookingRequests.length}
              </span>
            )}
          </button>
          
          <button
            onClick={() => setActiveTab('active')}
            className={`py-4 px-6 font-medium text-sm ${
              activeTab === 'active'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Active Bookings
          </button>
          
          <button
            onClick={() => setActiveTab('completed')}
            className={`py-4 px-6 font-medium text-sm ${
              activeTab === 'completed'
                ? 'border-b-2 border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            Completed
          </button>
        </nav>
      </div>

      {/* Pending Booking Requests */}
      {activeTab === 'pending' && (
        <div className="space-y-4">
          {bookingRequests.length === 0 ? (
            <div className="bg-gray-100 p-8 rounded-lg text-center">
              <h2 className="text-xl font-semibold mb-3">No pending requests</h2>
              <p className="text-gray-600">You don't have any pending booking requests.</p>
            </div>
          ) : (
            bookingRequests.map((booking) => (
              <div key={booking.id} className="bg-white border rounded-lg shadow-sm p-6">
                <div className="flex flex-col md:flex-row justify-between">
                  <div>
                    <h3 className="text-xl font-semibold mb-2">
                      {booking.brand} {booking.model} ({booking.year})
                    </h3>
                    <p className="text-gray-600">
                      <span className="font-medium">Dates:</span> {new Date(booking.start_date).toLocaleDateString()} to {new Date(booking.end_date).toLocaleDateString()}
                    </p>
                    <p className="text-gray-600">
                      <span className="font-medium">Requested by:</span> {booking.renter_name}
                    </p>
                    <p className="text-gray-600">
                      <span className="font-medium">Total Price:</span> ${booking.total_price}
                    </p>
                  </div>
                  <div className="flex flex-col sm:flex-row mt-4 md:mt-0 sm:space-x-4 space-y-2 sm:space-y-0">
                    <button
                      className="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition"
                    >
                      Accept
                    </button>
                    <button
                      className="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700 transition"
                    >
                      Reject
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* Active Bookings */}
      {activeTab === 'active' && (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">Active bookings feature</h2>
          <p className="text-gray-600">This feature will be available soon.</p>
        </div>
      )}

      {/* Completed Bookings */}
      {activeTab === 'completed' && (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">Completed bookings feature</h2>
          <p className="text-gray-600">This feature will be available soon.</p>
        </div>
      )}

      {/* Car Listings Section */}
      <h2 className="text-2xl font-bold mb-6 mt-12">Your Car Listings</h2>
      {!Array.isArray(currentListings) || currentListings.length === 0 ? (
        <div className="bg-gray-100 p-8 rounded-lg text-center">
          <h2 className="text-xl font-semibold mb-3">No car listings yet</h2>
          <p className="text-gray-600 mb-4">You don't have any car listings.</p>
          <Link
            to="/list-car"
            className="inline-block bg-blue-600 text-white font-medium py-2 px-4 rounded hover:bg-blue-700 transition"
          >
            List Your First Car
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.isArray(currentListings) && currentListings.map((car) => (
            <div key={car.id} className="bg-white border rounded-lg shadow-sm overflow-hidden">
              {car.image_url ? (
                <img
                  src={car.image_url}
                  alt={`${car.brand || car.make} ${car.model}`}
                  className="w-full h-48 object-cover"
                />
              ) : (
                <div className="w-full h-48 bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-400">No image</span>
                </div>
              )}
              <div className="p-6">
                <div className="flex justify-between items-start">
                  <h3 className="text-lg font-semibold">
                    {car.brand || car.make} {car.model}
                  </h3>
                  <span className="text-green-600 font-semibold">${car.price_per_day}/day</span>
                </div>
                <p className="text-gray-600 text-sm mt-1">{car.year} • {car.color}</p>
                
                {car.status && (
                  <div className="mt-2">
                    <span className={`inline-block rounded-full px-3 py-1 text-xs font-semibold 
                      ${car.status === 'available' ? 'bg-green-100 text-green-800' : 
                        car.status === 'maintenance' ? 'bg-yellow-100 text-yellow-800' : 
                        'bg-red-100 text-red-800'}`}>
                      {car.status.charAt(0).toUpperCase() + car.status.slice(1)}
                    </span>
                  </div>
                )}
                
                <div className="mt-4 pt-4 border-t border-gray-100 flex justify-between">
                  <Link
                    to={`/cars/${car.id}`}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    View Details
                  </Link>
                  <button
                    onClick={() => handleDeleteCar(car.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Add Car Button */}
      <div className="mt-8 text-center">
        <Link
          to="/list-car"
          className="inline-block bg-blue-600 text-white font-medium py-3 px-6 rounded-lg hover:bg-blue-700 transition"
        >
          + Add Another Car
        </Link>
      </div>
    </div>
  );
};

export default HostDashboard;
