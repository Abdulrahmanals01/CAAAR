import React, { useState, useEffect } from 'react';
import { getUserBookings, updateBookingStatus } from '../api/bookings';

const BookingHistory = () => {
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  
  const userRole = localStorage.getItem('userRole');

  useEffect(() => {
    fetchBookings();
  }, []);

  const fetchBookings = async () => {
    setLoading(true);
    try {
      const response = await getUserBookings();
      if (response.success) {
        setBookings(response.data);
      } else {
        setError(response.error);
      }
    } catch (err) {
      setError('Failed to load bookings');
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (bookingId, status) => {
    try {
      const response = await updateBookingStatus(bookingId, status);
      if (response.success) {
        // Update booking in state
        setBookings(bookings.map(booking => 
          booking.id === bookingId ? { ...booking, status } : booking
        ));
      } else {
        setError(response.error);
      }
    } catch (err) {
      setError('Failed to update booking status');
    }
  };

  const getStatusBadgeClass = (status) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'accepted':
        return 'bg-green-100 text-green-800';
      case 'rejected':
        return 'bg-red-100 text-red-800';
      case 'canceled':
        return 'bg-gray-100 text-gray-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">
        {userRole === 'host' ? 'Booking Requests' : 'Your Bookings'}
      </h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
          {error}
        </div>
      )}

      {bookings.length === 0 ? (
        <div className="bg-white rounded-lg shadow-md p-6 text-center">
          <p className="text-gray-600">No bookings found.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {bookings.map(booking => (
            <div key={booking.id} className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h2 className="text-xl font-bold">
                      {booking.brand} {booking.model} ({booking.year})
                    </h2>
                    <p className="text-gray-600 mt-1">
                      {new Date(booking.start_date).toLocaleDateString()} to {new Date(booking.end_date).toLocaleDateString()}
                    </p>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusBadgeClass(booking.status)}`}>
                    {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                  </span>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <h3 className="text-gray-500 text-sm">Total Price</h3>
                    <p className="font-medium">${booking.total_price}</p>
                  </div>
                  <div>
                    <h3 className="text-gray-500 text-sm">
                      {userRole === 'host' ? 'Renter' : 'Host'}
                    </h3>
                    <p className="font-medium">
                      {userRole === 'host' ? booking.renter_name : booking.host_name}
                    </p>
                  </div>
                </div>

                {userRole === 'host' && booking.status === 'pending' && (
                  <div className="flex space-x-2 mt-4">
                    <button
                      onClick={() => handleStatusUpdate(booking.id, 'accepted')}
                      className="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition"
                    >
                      Accept
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(booking.id, 'rejected')}
                      className="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700 transition"
                    >
                      Reject
                    </button>
                  </div>
                )}

                {userRole === 'renter' && booking.status === 'pending' && (
                  <div className="mt-4">
                    <button
                      onClick={() => handleStatusUpdate(booking.id, 'canceled')}
                      className="bg-gray-600 text-white py-2 px-4 rounded hover:bg-gray-700 transition"
                    >
                      Cancel
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default BookingHistory;
