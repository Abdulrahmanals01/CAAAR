import React, { useState, useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { ChatContext } from '../../context/ChatContext';

const Navbar = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  // Get unread count from chat context
  const chatContext = useContext(ChatContext);
  const unreadCount = chatContext?.unreadCount || 0;

  const isAuthenticated = localStorage.getItem('token') !== null;
  const userRole = localStorage.getItem('userRole');
  const userName = localStorage.getItem('userName') || 'User';

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userRole');
    localStorage.removeItem('userName');
    navigate('/');
    window.location.reload();
  };

  const handleRoleSwitch = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token");
      console.log("Current role before switch:", userRole);

      // Get the new role (opposite of current role)
      const newRole = userRole === 'host' ? 'renter' : 'host';

      // Using the switch-role endpoint
      const response = await axios.post(
        "http://localhost:5000/api/auth/switch-role",
        { newRole }, // Add the newRole to match the backend expectation
        {
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          }
        }
      );

      console.log("Switch role response:", response.data);

      // Update local storage with new token and role
      localStorage.setItem("token", response.data.token);
      localStorage.setItem("userRole", response.data.user.role);
      localStorage.setItem("userName", response.data.user.name || userName);

      console.log("Role switched successfully to:", response.data.user.role);

      // Navigate to the home page instead of just reloading
      window.location.href = '/';
    } catch (error) {
      console.error("Error switching role:", error);
      alert("Failed to switch role. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <nav className="bg-blue-600 text-white p-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold">Sayarati</Link>

        <div className="hidden md:flex space-x-6">
          <Link to="/" className="hover:text-blue-200">Home</Link>
          <Link to="/cars/search" className="hover:text-blue-200">Find Cars</Link>
          <Link to="/support" className="hover:text-blue-200">Support</Link>

          {isAuthenticated && (
            <>
              <Link to="/dashboard" className="hover:text-blue-200">Dashboard</Link>

              {userRole === 'host' && (
                <Link to="/list-car" className="hover:text-blue-200">List Your Car</Link>
              )}
            </>
          )}
        </div>

        <div className="flex items-center space-x-4">
          {isAuthenticated && (
            <Link to="/messages" className="relative hover:text-blue-200">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
              </svg>
              {unreadCount > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full text-xs w-4 h-4 flex items-center justify-center">
                  {unreadCount > 9 ? '9+' : unreadCount}
                </span>
              )}
            </Link>
          )}

          {isAuthenticated ? (
            <>
              {userRole && (
                <button
                  className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 disabled:opacity-50"
                  onClick={handleRoleSwitch}
                  disabled={loading}
                >
                  {loading ? 'Switching...' : `Switch to ${userRole === 'host' ? 'Renter' : 'Host'}`}
                </button>
              )}

              <span className="hidden md:inline-block">
                Welcome, {userName} ({userRole})
              </span>

              <button
                onClick={handleLogout}
                className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
              >
                Logout
              </button>
            </>
          ) : (
            <>
              <Link
                to="/login"
                className="bg-transparent border border-white text-white px-4 py-2 rounded hover:bg-white hover:text-blue-600"
              >
                Login
              </Link>
              <Link
                to="/register"
                className="bg-white text-blue-600 px-4 py-2 rounded hover:bg-blue-100"
              >
                Register
              </Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
