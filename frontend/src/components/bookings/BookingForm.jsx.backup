import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { createBooking } from '../../api/bookings';

const BookingForm = ({ car, isHost }) => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    start_date: '',
    end_date: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
    const [totalPrice, setTotalPrice] = useState(0);
  
  // Get user ID from localStorage to check if user is car owner
  const userId = parseInt(localStorage.getItem('userId')) || 0;
  const isOwnCar = car && car.user_id === userId;

  // Set initial dates to car's availability period
  useEffect(() => {
    if (car) {
      const today = new Date().toISOString().split('T')[0];
      const availabilityStart = car.availability_start;
      
      // Choose the later date between today and availability_start
      const startDate = today > availabilityStart ? today : availabilityStart;
      
      setFormData({
        start_date: startDate,
        end_date: car.availability_end,
      });
    }
  }, [car]);

  // Calculate total price whenever dates change
  useEffect(() => {
    if (formData.start_date && formData.end_date && car) {
      const start = new Date(formData.start_date);
      const end = new Date(formData.end_date);
      const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
      setTotalPrice(days * car.price_per_day);
    }
  }, [formData, car]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const bookingData = {
        car_id: car.id,
        start_date: formData.start_date,
        end_date: formData.end_date,
      };

      const response = await createBooking(bookingData);

      if (response.success) {
        setSuccess(true);
        // Redirect to booking history after a short delay
        setTimeout(() => navigate('/booking-history'), 2000);
      } else {
        throw new Error(response.error);
      }
    } catch (err) {
      setError(err.message || 'Failed to create booking');
    } finally {
      setLoading(false);
    }
  };

  // Don't show booking form for hosts or if the car details aren't loaded
  if (isHost || isOwnCar || !car) {
    return null;
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Book this car</h2>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded">
          {error}
        </div>
      )}

      {success && (
        <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded">
          Booking request sent successfully! Redirecting to your bookings...
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="block text-gray-700 font-medium mb-2">Start Date</label>
          <input
            type="date"
            name="start_date"
            value={formData.start_date}
            onChange={handleChange}
            min={car.availability_start}
            max={car.availability_end}
            required
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 font-medium mb-2">End Date</label>
          <input
            type="date"
            name="end_date"
            value={formData.end_date}
            onChange={handleChange}
            min={formData.start_date}
            max={car.availability_end}
            required
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div className="mb-6 bg-blue-50 p-4 rounded-lg">
          <h3 className="text-lg font-semibold mb-2">Price Details</h3>
          <div className="flex justify-between mb-2">
            <span className="text-gray-600">Price per day:</span>
            <span className="font-medium">${car.price_per_day} / day</span>
          </div>
          <div className="border-t border-gray-300 my-2"></div>
          <div className="flex justify-between text-lg font-bold">
            <span>Total Price:</span>
            <span>${totalPrice.toFixed(2)}</span>
          </div>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition disabled:opacity-50"
        >
          {loading ? 'Processing...' : 'Book Now'}
        </button>
      </form>
    </div>
  );
};

export default BookingForm;

