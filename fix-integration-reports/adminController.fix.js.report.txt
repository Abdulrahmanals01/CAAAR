=== FIX SCRIPT ANALYSIS: ./backend/src/controllers/adminController.fix.js ===
Generated on: Sat May  3 18:20:20 +03 2025
=======================================

CONTENT:
---------
// Only the modified functions - freezeUser and banUser
// Freeze user account
exports.freezeUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const { duration, reason } = req.body;
    const adminId = req.user.id;
    const adminName = req.user.name || 'Admin User';

    console.log('Freezing user:', { userId, adminId, adminName, duration, reason });

    // Get user info before freezing
    const userInfo = await db.query('SELECT name, role FROM users WHERE id = $1', [userId]);
    if (userInfo.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }
    const userName = userInfo.rows[0].name;
    const userRole = userInfo.rows[0].role;

    // Calculate freeze until date
    const freezeUntil = new Date();
    freezeUntil.setDate(freezeUntil.getDate() + parseInt(duration));

    // Update user status
    const updateQuery = `
      UPDATE users
      SET status = 'frozen',
          freeze_until = $1,
          freeze_reason = $2
      WHERE id = $3
      RETURNING *
    `;

    const result = await db.query(updateQuery, [freezeUntil, reason, userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Record admin action
    await recordAdminAction(
      adminId,
      adminName,
      'freeze',
      'user',
      userId,
      userName,
      reason,
      freezeUntil
    );

    // Get active bookings
    const activeBookingsQuery = `
      SELECT b.id 
      FROM bookings b
      JOIN cars c ON b.car_id = c.id
      WHERE (b.renter_id = $1 OR c.user_id = $1)
        AND b.status = 'accepted'
    `;
    
    const activeBookings = await db.query(activeBookingsQuery, [userId]);
    const hasActiveBookings = activeBookings.rows.length > 0;
    
    // If the user is a renter, cancel all pending booking requests
    if (userRole === 'renter') {
      await db.query(`
        UPDATE bookings
        SET status = 'canceled',
            cancellation_reason = 'Account frozen by admin: ' || $1
        WHERE renter_id = $2
          AND status = 'pending'
      `, [reason, userId]);
    }
    
    // If the user is a host and there are no active bookings, delete all listings
    if (userRole === 'host' && !hasActiveBookings) {
      await db.query(`
        DELETE FROM cars
        WHERE user_id = $1
      `, [userId]);
    } 
    // If the user is a host with active bookings, only mark listings as unavailable
    else if (userRole === 'host' && hasActiveBookings) {
      await db.query(`
        UPDATE cars
        SET status = 'unavailable'
        WHERE user_id = $1
      `, [userId]);
    }

    res.json({
      success: true,
      message: 'User account frozen successfully',
      hasActiveBookings: hasActiveBookings
    });
  } catch (error) {
    console.error('Error freezing user:', error);
    res.status(500).json({
      success: false,
      message: 'Error freezing user account'
    });
  }
};

// Ban user account
exports.banUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const { reason } = req.body;
    const adminId = req.user.id;
    const adminName = req.user.name || 'Admin User';

    console.log('Ban user request:', { userId, adminId, adminName, reason });

    // Get user info before banning
    const userInfo = await db.query('SELECT name, role FROM users WHERE id = $1', [userId]);
    if (userInfo.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }
    const userName = userInfo.rows[0].name;
    const userRole = userInfo.rows[0].role;

    // Update user status
    const updateQuery = `
      UPDATE users
      SET status = 'banned',
          ban_reason = $1
      WHERE id = $2
      RETURNING *
    `;

    const result = await db.query(updateQuery, [reason, userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // Record admin action
    await recordAdminAction(
      adminId,
      adminName,
      'ban',
      'user',
      userId,
      userName,
      reason
    );

    // Get active bookings
    const activeBookingsQuery = `
      SELECT b.id 
      FROM bookings b
      JOIN cars c ON b.car_id = c.id
      WHERE (b.renter_id = $1 OR c.user_id = $1)
        AND b.status = 'accepted'
    `;
    
    const activeBookings = await db.query(activeBookingsQuery, [userId]);
    const hasActiveBookings = activeBookings.rows.length > 0;
    
    // If the user is a renter, cancel all pending booking requests
    if (userRole === 'renter') {
      await db.query(`
        UPDATE bookings
        SET status = 'canceled',
            cancellation_reason = 'Account banned by admin: ' || $1
        WHERE renter_id = $2
          AND status = 'pending'
      `, [reason, userId]);
    }
    
    // If the user is a host and there are no active bookings, delete all listings
    if (userRole === 'host' && !hasActiveBookings) {
      await db.query(`
        DELETE FROM cars
        WHERE user_id = $1
      `, [userId]);
    } 
    // If the user is a host with active bookings, only mark listings as unavailable
    else if (userRole === 'host' && hasActiveBookings) {
      await db.query(`
        UPDATE cars
        SET status = 'unavailable'
        WHERE user_id = $1
      `, [userId]);
    }

    res.json({
      success: true,
      message: 'User banned successfully',
      hasActiveBookings: hasActiveBookings
    });
  } catch (error) {
    console.error('Error banning user:', error);
    res.status(500).json({
      success: false,
      message: 'Error banning user'
    });
  }
};

AFFECTED FILES (BASED ON REFERENCES):
------------------------------------

RECOMMENDATION:
----------------
This fix script should be manually integrated into the main codebase.
After integration, the fix script can be deleted.
