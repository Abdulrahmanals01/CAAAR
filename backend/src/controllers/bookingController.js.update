// Add this function to your bookingController.js

// Mark booking as completed
exports.completeBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // First, check if the booking exists and user is the host
    const bookingCheck = await db.query(
      `SELECT b.*, c.user_id as host_id 
       FROM bookings b
       JOIN cars c ON b.car_id = c.id
       WHERE b.id = $1`,
      [id]
    );

    if (bookingCheck.rows.length === 0) {
      return res.status(404).json({ message: 'Booking not found' });
    }

    const booking = bookingCheck.rows[0];

    // Verify that the current user is the host
    if (booking.host_id !== userId) {
      return res.status(403).json({ message: 'Only the host can mark a booking as completed' });
    }

    // Check if booking is in 'accepted' status
    if (booking.status !== 'accepted') {
      return res.status(400).json({ message: `Cannot complete a booking with status '${booking.status}'` });
    }

    // Update booking status to completed
    const updatedBooking = await db.query(
      'UPDATE bookings SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *',
      ['completed', id]
    );

    res.json(updatedBooking.rows[0]);
  } catch (err) {
    console.error('Error completing booking:', err);
    res.status(500).json({ message: 'Server error while completing booking' });
  }
};

// Start trip (for renter)
exports.startTrip = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    // Check if booking exists and user is the renter
    const bookingCheck = await db.query(
      'SELECT * FROM bookings WHERE id = $1',
      [id]
    );
    
    if (bookingCheck.rows.length === 0) {
      return res.status(404).json({ message: 'Booking not found' });
    }
    
    const booking = bookingCheck.rows[0];
    
    // Verify user is the renter
    if (booking.renter_id !== userId) {
      return res.status(403).json({ message: 'Only the renter can start the trip' });
    }
    
    // Check booking status is 'accepted'
    if (booking.status !== 'accepted') {
      return res.status(400).json({ 
        message: `Cannot start a trip for a booking with status '${booking.status}'` 
      });
    }
    
    // Update booking to add trip_started=true
    const updatedBooking = await db.query(
      'UPDATE bookings SET trip_started = true, trip_start_time = NOW(), updated_at = NOW() WHERE id = $1 RETURNING *',
      [id]
    );
    
    res.json(updatedBooking.rows[0]);
  } catch (err) {
    console.error('Error starting trip:', err);
    res.status(500).json({ message: 'Server error while starting trip' });
  }
};

// End trip early (for host)
exports.endTripEarly = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    // Check if booking exists and user is the host
    const bookingCheck = await db.query(
      `SELECT b.*, c.user_id as host_id 
       FROM bookings b
       JOIN cars c ON b.car_id = c.id
       WHERE b.id = $1`,
      [id]
    );
    
    if (bookingCheck.rows.length === 0) {
      return res.status(404).json({ message: 'Booking not found' });
    }
    
    const booking = bookingCheck.rows[0];
    
    // Verify user is the host
    if (booking.host_id !== userId) {
      return res.status(403).json({ message: 'Only the host can end the trip early' });
    }
    
    // Check booking status is 'accepted' and trip_started is true
    if (booking.status !== 'accepted') {
      return res.status(400).json({ 
        message: `Cannot end a trip for a booking with status '${booking.status}'` 
      });
    }
    
    if (!booking.trip_started) {
      return res.status(400).json({ message: 'Cannot end a trip that has not started' });
    }
    
    // Calculate adjusted price based on actual usage
    const startDate = new Date(booking.trip_start_time || booking.start_date);
    const endDate = new Date();
    const originalEndDate = new Date(booking.end_date);
    
    // Calculate days used (partial days count as full days)
    const daysUsed = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
    const totalDays = Math.ceil((originalEndDate - startDate) / (1000 * 60 * 60 * 24));
    
    // Get daily price
    const carResult = await db.query('SELECT price_per_day FROM cars WHERE id = $1', [booking.car_id]);
    const pricePerDay = carResult.rows[0].price_per_day;
    
    // Calculate adjusted price
    const adjustedPrice = Math.min(daysUsed * pricePerDay, booking.total_price);
    
    // Update booking to completed with early end
    const updatedBooking = await db.query(
      `UPDATE bookings 
       SET status = 'completed', 
           trip_ended = true, 
           trip_end_time = NOW(), 
           actual_end_date = $1,
           adjusted_price = $2,
           updated_at = NOW() 
       WHERE id = $3 RETURNING *`,
      [new Date(), adjustedPrice, id]
    );
    
    res.json(updatedBooking.rows[0]);
  } catch (err) {
    console.error('Error ending trip early:', err);
    res.status(500).json({ message: 'Server error while ending trip early' });
  }
};

// Upload car inspection photos
exports.uploadInspectionPhotos = async (req, res) => {
  try {
    const { id, type } = req.params; // type can be 'before' or 'after'
    const userId = req.user.id;
    
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ message: 'No photos uploaded' });
    }
    
    // Check if booking exists and user is part of it
    const bookingCheck = await db.query(
      `SELECT b.*, c.user_id as host_id 
       FROM bookings b
       JOIN cars c ON b.car_id = c.id
       WHERE b.id = $1`,
      [id]
    );
    
    if (bookingCheck.rows.length === 0) {
      return res.status(404).json({ message: 'Booking not found' });
    }
    
    const booking = bookingCheck.rows[0];
    
    // Verify user is part of the booking
    if (booking.renter_id !== userId && booking.host_id !== userId) {
      return res.status(403).json({ 
        message: 'You are not authorized to upload photos for this booking' 
      });
    }
    
    // Check if the timing is correct for the photo type
    if (type === 'before' && booking.trip_started) {
      return res.status(400).json({ 
        message: 'Cannot upload before-trip photos after the trip has started' 
      });
    }
    
    if (type === 'after' && booking.status !== 'completed') {
      return res.status(400).json({ 
        message: 'Cannot upload after-trip photos before the trip is completed' 
      });
    }
    
    // Process photo paths
    const photoPaths = req.files.map(file => file.path);
    
    // Store in database
    if (type === 'before') {
      await db.query(
        'UPDATE bookings SET before_trip_photos = $1, updated_at = NOW() WHERE id = $2',
        [JSON.stringify(photoPaths), id]
      );
    } else {
      await db.query(
        'UPDATE bookings SET after_trip_photos = $1, updated_at = NOW() WHERE id = $2',
        [JSON.stringify(photoPaths), id]
      );
    }
    
    res.json({ 
      message: `${type}-trip photos uploaded successfully`, 
      photos: photoPaths 
    });
  } catch (err) {
    console.error(`Error uploading ${type}-trip photos:`, err);
    res.status(500).json({ message: `Server error while uploading ${type}-trip photos` });
  }
};
