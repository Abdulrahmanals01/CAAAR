// Add this function to your existing carController.js file

// Get car with host and rating information
exports.getCarWithRatings = async (req, res) => {
  try {
    const { id } = req.params;
    
    // First get the car details
    const carQuery = await db.query(
      `SELECT c.*, u.name as host_name, u.id as user_id
       FROM cars c
       JOIN users u ON c.user_id = u.id
       WHERE c.id = $1`,
      [id]
    );
    
    if (carQuery.rows.length === 0) {
      return res.status(404).json({ message: 'Car not found' });
    }
    
    const car = carQuery.rows[0];
    
    // Get host information
    const hostQuery = await db.query(
      `SELECT AVG(r.rating) as average_rating, 
              COUNT(*) as total_ratings,
              u.created_at as joined_date
       FROM users u
       LEFT JOIN ratings r ON r.rating_for = u.id
       WHERE u.id = $1
       GROUP BY u.id`,
      [car.user_id]
    );
    
    // Get car ratings
    const carRatingsQuery = await db.query(
      `SELECT cr.*, 
              u.name as renter_name,
              b.start_date, b.end_date
       FROM car_ratings cr
       JOIN users u ON cr.renter_id = u.id
       JOIN bookings b ON cr.booking_id = b.id
       WHERE cr.car_id = $1
       ORDER BY cr.created_at DESC`,
      [id]
    );
    
    // Calculate average car rating
    const avgRatingQuery = await db.query(
      `SELECT AVG(rating) as average_rating, COUNT(*) as total_ratings
       FROM car_ratings 
       WHERE car_id = $1`,
      [id]
    );
    
    // Add rating categories
    const categoryRatingsQuery = await db.query(
      `SELECT
        AVG(CASE WHEN category = 'cleanliness' THEN rating ELSE NULL END) as cleanliness,
        AVG(CASE WHEN category = 'maintenance' THEN rating ELSE NULL END) as maintenance,
        AVG(CASE WHEN category = 'communication' THEN rating ELSE NULL END) as communication,
        AVG(CASE WHEN category = 'convenience' THEN rating ELSE NULL END) as convenience
       FROM car_rating_categories
       WHERE car_id = $1`,
      [id]
    );
    
    // Combine all information
    const result = {
      ...car,
      host_rating: hostQuery.rows[0]?.average_rating || 0,
      host_joined_date: hostQuery.rows[0]?.joined_date,
      average_rating: avgRatingQuery.rows[0]?.average_rating || 0,
      total_ratings: parseInt(avgRatingQuery.rows[0]?.total_ratings || 0),
      ratings: carRatingsQuery.rows,
      rating_categories: categoryRatingsQuery.rows[0] || {}
    };
    
    res.json(result);
  } catch (err) {
    console.error('Error getting car with ratings:', err);
    res.status(500).json({ message: 'Server error while getting car details' });
  }
};
